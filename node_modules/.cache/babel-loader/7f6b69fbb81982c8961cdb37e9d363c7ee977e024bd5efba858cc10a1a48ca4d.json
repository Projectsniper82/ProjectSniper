{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\nimport { COptionPublicKeyLayout } from '../serialization.js';\n/** TODO: docs */\nexport const initializeMintInstructionData = struct([u8('instruction'), u8('decimals'), publicKey('mintAuthority'), new COptionPublicKeyLayout('freezeAuthority')]);\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority, programId = TOKEN_PROGRAM_ID) {\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(67); // worst-case size\n  initializeMintInstructionData.encode({\n    instruction: TokenInstruction.InitializeMint,\n    decimals,\n    mintAuthority,\n    freezeAuthority\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: data.subarray(0, initializeMintInstructionData.getSpan(data))\n  });\n}\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMintInstructionData.getSpan(instruction.data)) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      rent\n    },\n    data\n  } = decodeInitializeMintInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeMint) throw new TokenInvalidInstructionTypeError();\n  if (!mint || !rent) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data\n  };\n}\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintInstructionUnchecked({\n  programId,\n  keys: [mint, rent],\n  data\n}) {\n  const {\n    instruction,\n    decimals,\n    mintAuthority,\n    freezeAuthority\n  } = initializeMintInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data: {\n      instruction,\n      decimals,\n      mintAuthority,\n      freezeAuthority\n    }\n  };\n}","map":{"version":3,"names":["struct","u8","publicKey","SYSVAR_RENT_PUBKEY","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","COptionPublicKeyLayout","initializeMintInstructionData","createInitializeMintInstruction","mint","decimals","mintAuthority","freezeAuthority","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","encode","instruction","InitializeMint","subarray","getSpan","decodeInitializeMintInstruction","equals","length","rent","decodeInitializeMintInstructionUnchecked","decode"],"sources":["/home/sniperbot_1/solana-wallet-dashboard/solana-token-manager/node_modules/@solana/spl-token/src/instructions/initializeMint.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\nimport { COptionPublicKeyLayout } from '../serialization.js';\n\n/** TODO: docs */\nexport interface InitializeMintInstructionData {\n    instruction: TokenInstruction.InitializeMint;\n    decimals: number;\n    mintAuthority: PublicKey;\n    freezeAuthority: PublicKey | null;\n}\n\n/** TODO: docs */\nexport const initializeMintInstructionData = struct<InitializeMintInstructionData>([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    new COptionPublicKeyLayout('freezeAuthority'),\n]);\n\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintInstruction(\n    mint: PublicKey,\n    decimals: number,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    programId = TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n    const keys = [\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(67); // worst-case size\n    initializeMintInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMint,\n            decimals,\n            mintAuthority,\n            freezeAuthority,\n        },\n        data,\n    );\n\n    return new TransactionInstruction({\n        keys,\n        programId,\n        data: data.subarray(0, initializeMintInstructionData.getSpan(data)),\n    });\n}\n\n/** A decoded, valid InitializeMint instruction */\nexport interface DecodedInitializeMintInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        rent: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMint;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID,\n): DecodedInitializeMintInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintInstructionData.getSpan(instruction.data))\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, rent },\n        data,\n    } = decodeInitializeMintInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint) throw new TokenInvalidInstructionTypeError();\n    if (!mint || !rent) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMint instruction */\nexport interface DecodedInitializeMintInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintInstructionUnchecked({\n    programId,\n    keys: [mint, rent],\n    data,\n}: TransactionInstruction): DecodedInitializeMintInstructionUnchecked {\n    const { instruction, decimals, mintAuthority, freezeAuthority } = initializeMintInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority,\n        },\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}