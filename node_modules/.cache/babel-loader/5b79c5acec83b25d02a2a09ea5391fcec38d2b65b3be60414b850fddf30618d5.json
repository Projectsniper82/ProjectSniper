{"ast":null,"code":"import { PublicKey, Transaction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAmountToUiAmountInstruction } from '../instructions/amountToUiAmount.js';\nimport { unpackMint } from '../state/mint.js';\nimport { getInterestBearingMintConfigState } from '../extensions/interestBearingMint/state.js';\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Amount of tokens to be converted to Ui Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nexport async function amountToUiAmount(connection, payer, mint, amount, programId = TOKEN_PROGRAM_ID) {\n  const transaction = new Transaction().add(createAmountToUiAmountInstruction(mint, amount, programId));\n  const {\n    returnData,\n    err\n  } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n  if (returnData?.data) {\n    return Buffer.from(returnData.data[0], returnData.data[1]).toString('utf-8');\n  }\n  return err;\n}\n/**\n * Calculates the exponent for the interest rate formula.\n * @param t1 - The start time in seconds.\n * @param t2 - The end time in seconds.\n * @param r - The interest rate in basis points.\n * @returns The calculated exponent.\n */\nfunction calculateExponentForTimesAndRate(t1, t2, r) {\n  const ONE_IN_BASIS_POINTS = 10000;\n  const SECONDS_PER_YEAR = 60 * 60 * 24 * 365.24;\n  const timespan = t2 - t1;\n  const numerator = r * timespan;\n  const exponent = numerator / (SECONDS_PER_YEAR * ONE_IN_BASIS_POINTS);\n  return Math.exp(exponent);\n}\n/**\n * Retrieves the current timestamp from the Solana clock sysvar.\n * @param connection - The Solana connection object.\n * @returns A promise that resolves to the current timestamp in seconds.\n * @throws An error if the sysvar clock cannot be fetched or parsed.\n */\nasync function getSysvarClockTimestamp(connection) {\n  const info = await connection.getParsedAccountInfo(new PublicKey('SysvarC1ock11111111111111111111111111111111'));\n  if (!info) {\n    throw new Error('Failed to fetch sysvar clock');\n  }\n  if (typeof info.value === 'object' && info.value && 'data' in info.value && 'parsed' in info.value.data) {\n    return info.value.data.parsed.info.unixTimestamp;\n  }\n  throw new Error('Failed to parse sysvar clock');\n}\n/**\n * Convert amount to UiAmount for a mint with interest bearing extension without simulating a transaction\n * This implements the same logic as the CPI instruction available in /token/program-2022/src/extension/interest_bearing_mint/mod.rs\n * In general to calculate compounding interest over a period of time, the formula is:\n * A = P * e^(r * t) where\n * A = final amount after interest\n * P = principal amount (initial investment)\n * r = annual interest rate (as a decimal, e.g., 5% = 0.05)\n * t = time in years\n * e = mathematical constant (~2.718)\n *\n * In this case, we are calculating the total scale factor for the interest bearing extension which is the product of two exponential functions:\n * totalScale = e^(r1 * t1) * e^(r2 * t2)\n * where r1 and r2 are the interest rates before and after the last update, and t1 and t2 are the times in years between\n * the initialization timestamp and the last update timestamp, and between the last update timestamp and the current timestamp.\n *\n * @param amount                   Amount of tokens to be converted\n * @param decimals                 Number of decimals of the mint\n * @param currentTimestamp         Current timestamp in seconds\n * @param lastUpdateTimestamp      Last time the interest rate was updated in seconds\n * @param initializationTimestamp  Time the interest bearing extension was initialized in seconds\n * @param preUpdateAverageRate     Interest rate in basis points (1 basis point = 0.01%) before last update\n * @param currentRate              Current interest rate in basis points\n *\n * @return Amount scaled by accrued interest as a string with appropriate decimal places\n */\nexport function amountToUiAmountWithoutSimulation(amount, decimals, currentTimestamp,\n// in seconds\nlastUpdateTimestamp, initializationTimestamp, preUpdateAverageRate, currentRate) {\n  // Calculate pre-update exponent\n  // e^(preUpdateAverageRate * (lastUpdateTimestamp - initializationTimestamp) / (SECONDS_PER_YEAR * ONE_IN_BASIS_POINTS))\n  const preUpdateExp = calculateExponentForTimesAndRate(initializationTimestamp, lastUpdateTimestamp, preUpdateAverageRate);\n  // Calculate post-update exponent\n  // e^(currentRate * (currentTimestamp - lastUpdateTimestamp) / (SECONDS_PER_YEAR * ONE_IN_BASIS_POINTS))\n  const postUpdateExp = calculateExponentForTimesAndRate(lastUpdateTimestamp, currentTimestamp, currentRate);\n  // Calculate total scale\n  const totalScale = preUpdateExp * postUpdateExp;\n  // Scale the amount by the total interest factor\n  const scaledAmount = Number(amount) * totalScale;\n  // Calculate the decimal factor (e.g. 100 for 2 decimals)\n  const decimalFactor = Math.pow(10, decimals);\n  // Convert to UI amount by:\n  // 1. Truncating to remove any remaining decimals\n  // 2. Dividing by decimal factor to get final UI amount\n  // 3. Converting to string\n  return (Math.trunc(scaledAmount) / decimalFactor).toString();\n}\n/**\n * Convert amount to UiAmount for a mint without simulating a transaction\n * This implements the same logic as `process_amount_to_ui_amount` in /token/program-2022/src/processor.rs\n * and `process_amount_to_ui_amount` in /token/program/src/processor.rs\n *\n * @param connection     Connection to use\n * @param mint           Mint to use for calculations\n * @param amount         Amount of tokens to be converted to Ui Amount\n *\n * @return Ui Amount generated\n */\nexport async function amountToUiAmountForMintWithoutSimulation(connection, mint, amount) {\n  const accountInfo = await connection.getAccountInfo(mint);\n  const programId = accountInfo?.owner;\n  if (programId !== TOKEN_PROGRAM_ID && programId !== TOKEN_2022_PROGRAM_ID) {\n    throw new Error('Invalid program ID');\n  }\n  const mintInfo = unpackMint(mint, accountInfo, programId);\n  const interestBearingMintConfigState = getInterestBearingMintConfigState(mintInfo);\n  if (!interestBearingMintConfigState) {\n    const amountNumber = Number(amount);\n    const decimalsFactor = Math.pow(10, mintInfo.decimals);\n    return (amountNumber / decimalsFactor).toString();\n  }\n  const timestamp = await getSysvarClockTimestamp(connection);\n  return amountToUiAmountWithoutSimulation(amount, mintInfo.decimals, timestamp, Number(interestBearingMintConfigState.lastUpdateTimestamp), Number(interestBearingMintConfigState.initializationTimestamp), interestBearingMintConfigState.preUpdateAverageRate, interestBearingMintConfigState.currentRate);\n}\n/**\n * Convert an amount with interest back to the original amount without interest\n * This implements the same logic as the CPI instruction available in /token/program-2022/src/extension/interest_bearing_mint/mod.rs\n *\n * @param uiAmount                  UI Amount (principal plus continuously compounding interest) to be converted back to original principal\n * @param decimals                  Number of decimals for the mint\n * @param currentTimestamp          Current timestamp in seconds\n * @param lastUpdateTimestamp       Last time the interest rate was updated in seconds\n * @param initializationTimestamp   Time the interest bearing extension was initialized in seconds\n * @param preUpdateAverageRate      Interest rate in basis points (hundredths of a percent) before the last update\n * @param currentRate              Current interest rate in basis points\n *\n * In general to calculate the principal from the UI amount, the formula is:\n * P = A / (e^(r * t)) where\n * P = principal\n * A = UI amount\n * r = annual interest rate (as a decimal, e.g., 5% = 0.05)\n * t = time in years\n *\n * In this case, we are calculating the principal by dividing the UI amount by the total scale factor which is the product of two exponential functions:\n * totalScale = e^(r1 * t1) * e^(r2 * t2)\n * where r1 is the pre-update average rate, r2 is the current rate, t1 is the time in years between the initialization timestamp and the last update timestamp,\n * and t2 is the time in years between the last update timestamp and the current timestamp.\n * then to calculate the principal, we divide the UI amount by the total scale factor:\n * P = A / totalScale\n *\n * @return Original amount (principal) without interest\n */\nexport function uiAmountToAmountWithoutSimulation(uiAmount, decimals, currentTimestamp,\n// in seconds\nlastUpdateTimestamp, initializationTimestamp, preUpdateAverageRate, currentRate) {\n  const uiAmountNumber = parseFloat(uiAmount);\n  const decimalsFactor = Math.pow(10, decimals);\n  const uiAmountScaled = uiAmountNumber * decimalsFactor;\n  // Calculate pre-update exponent\n  const preUpdateExp = calculateExponentForTimesAndRate(initializationTimestamp, lastUpdateTimestamp, preUpdateAverageRate);\n  // Calculate post-update exponent\n  const postUpdateExp = calculateExponentForTimesAndRate(lastUpdateTimestamp, currentTimestamp, currentRate);\n  // Calculate total scale\n  const totalScale = preUpdateExp * postUpdateExp;\n  // Calculate original principal by dividing the UI amount (principal + interest) by the total scale\n  const originalPrincipal = uiAmountScaled / totalScale;\n  return BigInt(Math.trunc(originalPrincipal));\n}\n/**\n * Convert a UI amount back to the raw amount\n *\n * @param connection     Connection to use\n * @param mint           Mint to use for calculations\n * @param uiAmount       UI Amount to be converted back to raw amount\n *\n *\n * @return Raw amount\n */\nexport async function uiAmountToAmountForMintWithoutSimulation(connection, mint, uiAmount) {\n  const accountInfo = await connection.getAccountInfo(mint);\n  const programId = accountInfo?.owner;\n  if (programId !== TOKEN_PROGRAM_ID && programId !== TOKEN_2022_PROGRAM_ID) {\n    throw new Error('Invalid program ID');\n  }\n  const mintInfo = unpackMint(mint, accountInfo, programId);\n  const interestBearingMintConfigState = getInterestBearingMintConfigState(mintInfo);\n  if (!interestBearingMintConfigState) {\n    const uiAmountScaled = parseFloat(uiAmount) * Math.pow(10, mintInfo.decimals);\n    return BigInt(Math.trunc(uiAmountScaled));\n  }\n  const timestamp = await getSysvarClockTimestamp(connection);\n  return uiAmountToAmountWithoutSimulation(uiAmount, mintInfo.decimals, timestamp, Number(interestBearingMintConfigState.lastUpdateTimestamp), Number(interestBearingMintConfigState.initializationTimestamp), interestBearingMintConfigState.preUpdateAverageRate, interestBearingMintConfigState.currentRate);\n}","map":{"version":3,"names":["PublicKey","Transaction","TOKEN_2022_PROGRAM_ID","TOKEN_PROGRAM_ID","createAmountToUiAmountInstruction","unpackMint","getInterestBearingMintConfigState","amountToUiAmount","connection","payer","mint","amount","programId","transaction","add","returnData","err","simulateTransaction","value","data","Buffer","from","toString","calculateExponentForTimesAndRate","t1","t2","r","ONE_IN_BASIS_POINTS","SECONDS_PER_YEAR","timespan","numerator","exponent","Math","exp","getSysvarClockTimestamp","info","getParsedAccountInfo","Error","parsed","unixTimestamp","amountToUiAmountWithoutSimulation","decimals","currentTimestamp","lastUpdateTimestamp","initializationTimestamp","preUpdateAverageRate","currentRate","preUpdateExp","postUpdateExp","totalScale","scaledAmount","Number","decimalFactor","pow","trunc","amountToUiAmountForMintWithoutSimulation","accountInfo","getAccountInfo","owner","mintInfo","interestBearingMintConfigState","amountNumber","decimalsFactor","timestamp","uiAmountToAmountWithoutSimulation","uiAmount","uiAmountNumber","parseFloat","uiAmountScaled","originalPrincipal","BigInt","uiAmountToAmountForMintWithoutSimulation"],"sources":["/home/sniperbot_1/solana-wallet-dashboard/solana-token-manager/node_modules/@solana/spl-token/src/actions/amountToUiAmount.ts"],"sourcesContent":["import type { Connection, Signer, TransactionError } from '@solana/web3.js';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAmountToUiAmountInstruction } from '../instructions/amountToUiAmount.js';\nimport { unpackMint } from '../state/mint.js';\nimport { getInterestBearingMintConfigState } from '../extensions/interestBearingMint/state.js';\n\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Amount of tokens to be converted to Ui Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nexport async function amountToUiAmount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    amount: number | bigint,\n    programId = TOKEN_PROGRAM_ID,\n): Promise<string | TransactionError | null> {\n    const transaction = new Transaction().add(createAmountToUiAmountInstruction(mint, amount, programId));\n    const { returnData, err } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n    if (returnData?.data) {\n        return Buffer.from(returnData.data[0], returnData.data[1]).toString('utf-8');\n    }\n    return err;\n}\n\n/**\n * Calculates the exponent for the interest rate formula.\n * @param t1 - The start time in seconds.\n * @param t2 - The end time in seconds.\n * @param r - The interest rate in basis points.\n * @returns The calculated exponent.\n */\nfunction calculateExponentForTimesAndRate(t1: number, t2: number, r: number) {\n    const ONE_IN_BASIS_POINTS = 10000;\n    const SECONDS_PER_YEAR = 60 * 60 * 24 * 365.24;\n    const timespan = t2 - t1;\n    const numerator = r * timespan;\n    const exponent = numerator / (SECONDS_PER_YEAR * ONE_IN_BASIS_POINTS);\n    return Math.exp(exponent);\n}\n\n/**\n * Retrieves the current timestamp from the Solana clock sysvar.\n * @param connection - The Solana connection object.\n * @returns A promise that resolves to the current timestamp in seconds.\n * @throws An error if the sysvar clock cannot be fetched or parsed.\n */\nasync function getSysvarClockTimestamp(connection: Connection): Promise<number> {\n    const info = await connection.getParsedAccountInfo(new PublicKey('SysvarC1ock11111111111111111111111111111111'));\n    if (!info) {\n        throw new Error('Failed to fetch sysvar clock');\n    }\n    if (typeof info.value === 'object' && info.value && 'data' in info.value && 'parsed' in info.value.data) {\n        return info.value.data.parsed.info.unixTimestamp;\n    }\n    throw new Error('Failed to parse sysvar clock');\n}\n\n/**\n * Convert amount to UiAmount for a mint with interest bearing extension without simulating a transaction\n * This implements the same logic as the CPI instruction available in /token/program-2022/src/extension/interest_bearing_mint/mod.rs\n * In general to calculate compounding interest over a period of time, the formula is:\n * A = P * e^(r * t) where\n * A = final amount after interest\n * P = principal amount (initial investment)\n * r = annual interest rate (as a decimal, e.g., 5% = 0.05)\n * t = time in years\n * e = mathematical constant (~2.718)\n *\n * In this case, we are calculating the total scale factor for the interest bearing extension which is the product of two exponential functions:\n * totalScale = e^(r1 * t1) * e^(r2 * t2)\n * where r1 and r2 are the interest rates before and after the last update, and t1 and t2 are the times in years between\n * the initialization timestamp and the last update timestamp, and between the last update timestamp and the current timestamp.\n *\n * @param amount                   Amount of tokens to be converted\n * @param decimals                 Number of decimals of the mint\n * @param currentTimestamp         Current timestamp in seconds\n * @param lastUpdateTimestamp      Last time the interest rate was updated in seconds\n * @param initializationTimestamp  Time the interest bearing extension was initialized in seconds\n * @param preUpdateAverageRate     Interest rate in basis points (1 basis point = 0.01%) before last update\n * @param currentRate              Current interest rate in basis points\n *\n * @return Amount scaled by accrued interest as a string with appropriate decimal places\n */\nexport function amountToUiAmountWithoutSimulation(\n    amount: bigint,\n    decimals: number,\n    currentTimestamp: number, // in seconds\n    lastUpdateTimestamp: number,\n    initializationTimestamp: number,\n    preUpdateAverageRate: number,\n    currentRate: number,\n): string {\n    // Calculate pre-update exponent\n    // e^(preUpdateAverageRate * (lastUpdateTimestamp - initializationTimestamp) / (SECONDS_PER_YEAR * ONE_IN_BASIS_POINTS))\n    const preUpdateExp = calculateExponentForTimesAndRate(\n        initializationTimestamp,\n        lastUpdateTimestamp,\n        preUpdateAverageRate,\n    );\n\n    // Calculate post-update exponent\n    // e^(currentRate * (currentTimestamp - lastUpdateTimestamp) / (SECONDS_PER_YEAR * ONE_IN_BASIS_POINTS))\n    const postUpdateExp = calculateExponentForTimesAndRate(lastUpdateTimestamp, currentTimestamp, currentRate);\n\n    // Calculate total scale\n    const totalScale = preUpdateExp * postUpdateExp;\n    // Scale the amount by the total interest factor\n    const scaledAmount = Number(amount) * totalScale;\n\n    // Calculate the decimal factor (e.g. 100 for 2 decimals)\n    const decimalFactor = Math.pow(10, decimals);\n\n    // Convert to UI amount by:\n    // 1. Truncating to remove any remaining decimals\n    // 2. Dividing by decimal factor to get final UI amount\n    // 3. Converting to string\n    return (Math.trunc(scaledAmount) / decimalFactor).toString();\n}\n\n/**\n * Convert amount to UiAmount for a mint without simulating a transaction\n * This implements the same logic as `process_amount_to_ui_amount` in /token/program-2022/src/processor.rs\n * and `process_amount_to_ui_amount` in /token/program/src/processor.rs\n *\n * @param connection     Connection to use\n * @param mint           Mint to use for calculations\n * @param amount         Amount of tokens to be converted to Ui Amount\n *\n * @return Ui Amount generated\n */\nexport async function amountToUiAmountForMintWithoutSimulation(\n    connection: Connection,\n    mint: PublicKey,\n    amount: bigint,\n): Promise<string> {\n    const accountInfo = await connection.getAccountInfo(mint);\n    const programId = accountInfo?.owner;\n    if (programId !== TOKEN_PROGRAM_ID && programId !== TOKEN_2022_PROGRAM_ID) {\n        throw new Error('Invalid program ID');\n    }\n\n    const mintInfo = unpackMint(mint, accountInfo, programId);\n\n    const interestBearingMintConfigState = getInterestBearingMintConfigState(mintInfo);\n    if (!interestBearingMintConfigState) {\n        const amountNumber = Number(amount);\n        const decimalsFactor = Math.pow(10, mintInfo.decimals);\n        return (amountNumber / decimalsFactor).toString();\n    }\n\n    const timestamp = await getSysvarClockTimestamp(connection);\n\n    return amountToUiAmountWithoutSimulation(\n        amount,\n        mintInfo.decimals,\n        timestamp,\n        Number(interestBearingMintConfigState.lastUpdateTimestamp),\n        Number(interestBearingMintConfigState.initializationTimestamp),\n        interestBearingMintConfigState.preUpdateAverageRate,\n        interestBearingMintConfigState.currentRate,\n    );\n}\n\n/**\n * Convert an amount with interest back to the original amount without interest\n * This implements the same logic as the CPI instruction available in /token/program-2022/src/extension/interest_bearing_mint/mod.rs\n *\n * @param uiAmount                  UI Amount (principal plus continuously compounding interest) to be converted back to original principal\n * @param decimals                  Number of decimals for the mint\n * @param currentTimestamp          Current timestamp in seconds\n * @param lastUpdateTimestamp       Last time the interest rate was updated in seconds\n * @param initializationTimestamp   Time the interest bearing extension was initialized in seconds\n * @param preUpdateAverageRate      Interest rate in basis points (hundredths of a percent) before the last update\n * @param currentRate              Current interest rate in basis points\n *\n * In general to calculate the principal from the UI amount, the formula is:\n * P = A / (e^(r * t)) where\n * P = principal\n * A = UI amount\n * r = annual interest rate (as a decimal, e.g., 5% = 0.05)\n * t = time in years\n *\n * In this case, we are calculating the principal by dividing the UI amount by the total scale factor which is the product of two exponential functions:\n * totalScale = e^(r1 * t1) * e^(r2 * t2)\n * where r1 is the pre-update average rate, r2 is the current rate, t1 is the time in years between the initialization timestamp and the last update timestamp,\n * and t2 is the time in years between the last update timestamp and the current timestamp.\n * then to calculate the principal, we divide the UI amount by the total scale factor:\n * P = A / totalScale\n *\n * @return Original amount (principal) without interest\n */\nexport function uiAmountToAmountWithoutSimulation(\n    uiAmount: string,\n    decimals: number,\n    currentTimestamp: number, // in seconds\n    lastUpdateTimestamp: number,\n    initializationTimestamp: number,\n    preUpdateAverageRate: number,\n    currentRate: number,\n): bigint {\n    const uiAmountNumber = parseFloat(uiAmount);\n    const decimalsFactor = Math.pow(10, decimals);\n    const uiAmountScaled = uiAmountNumber * decimalsFactor;\n\n    // Calculate pre-update exponent\n    const preUpdateExp = calculateExponentForTimesAndRate(\n        initializationTimestamp,\n        lastUpdateTimestamp,\n        preUpdateAverageRate,\n    );\n\n    // Calculate post-update exponent\n    const postUpdateExp = calculateExponentForTimesAndRate(lastUpdateTimestamp, currentTimestamp, currentRate);\n\n    // Calculate total scale\n    const totalScale = preUpdateExp * postUpdateExp;\n\n    // Calculate original principal by dividing the UI amount (principal + interest) by the total scale\n    const originalPrincipal = uiAmountScaled / totalScale;\n    return BigInt(Math.trunc(originalPrincipal));\n}\n\n/**\n * Convert a UI amount back to the raw amount\n *\n * @param connection     Connection to use\n * @param mint           Mint to use for calculations\n * @param uiAmount       UI Amount to be converted back to raw amount\n *\n *\n * @return Raw amount\n */\nexport async function uiAmountToAmountForMintWithoutSimulation(\n    connection: Connection,\n    mint: PublicKey,\n    uiAmount: string,\n): Promise<bigint> {\n    const accountInfo = await connection.getAccountInfo(mint);\n    const programId = accountInfo?.owner;\n    if (programId !== TOKEN_PROGRAM_ID && programId !== TOKEN_2022_PROGRAM_ID) {\n        throw new Error('Invalid program ID');\n    }\n\n    const mintInfo = unpackMint(mint, accountInfo, programId);\n    const interestBearingMintConfigState = getInterestBearingMintConfigState(mintInfo);\n    if (!interestBearingMintConfigState) {\n        const uiAmountScaled = parseFloat(uiAmount) * Math.pow(10, mintInfo.decimals);\n        return BigInt(Math.trunc(uiAmountScaled));\n    }\n\n    const timestamp = await getSysvarClockTimestamp(connection);\n\n    return uiAmountToAmountWithoutSimulation(\n        uiAmount,\n        mintInfo.decimals,\n        timestamp,\n        Number(interestBearingMintConfigState.lastUpdateTimestamp),\n        Number(interestBearingMintConfigState.initializationTimestamp),\n        interestBearingMintConfigState.preUpdateAverageRate,\n        interestBearingMintConfigState.currentRate,\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}