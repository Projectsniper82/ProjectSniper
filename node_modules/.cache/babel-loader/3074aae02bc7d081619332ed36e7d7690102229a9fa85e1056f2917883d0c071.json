{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createPauseInstruction, createResumeInstruction } from './instructions.js';\n/**\n * Pause a pausable mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param owner           The pausable config authority\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\nexport async function pause(connection, payer, mint, owner, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createPauseInstruction(mint, ownerPublicKey, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Resume a pausable mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param owner           The pausable config authority\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\nexport async function resume(connection, payer, mint, owner, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createResumeInstruction(mint, ownerPublicKey, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","getSigners","TOKEN_2022_PROGRAM_ID","createPauseInstruction","createResumeInstruction","pause","connection","payer","mint","owner","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add","resume"],"sources":["/home/sniperbot_1/solana-wallet-dashboard/solana-token-manager/node_modules/@solana/spl-token/src/extensions/pausable/actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createPauseInstruction, createResumeInstruction } from './instructions.js';\n\n/**\n * Pause a pausable mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param owner           The pausable config authority\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\nexport async function pause(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID,\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(createPauseInstruction(mint, ownerPublicKey, multiSigners, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Resume a pausable mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param owner           The pausable config authority\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\nexport async function resume(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID,\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(createResumeInstruction(mint, ownerPublicKey, multiSigners, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,qBAAqB,QAAQ,oBAAoB;AAC1D,SAASC,sBAAsB,EAAEC,uBAAuB,QAAQ,mBAAmB;AAEnF;;;;;;;;;;;;;AAaA,OAAO,eAAeC,KAAKA,CACvBC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAyB,EACzBC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGV,qBAAqB;EAEjC,MAAM,CAACW,cAAc,EAAEC,OAAO,CAAC,GAAGb,UAAU,CAACQ,KAAK,EAAEC,YAAY,CAAC;EAEjE,MAAMK,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CAACb,sBAAsB,CAACK,IAAI,EAAEK,cAAc,EAAEH,YAAY,EAAEE,SAAS,CAAC,CAAC;EAEhH,OAAO,MAAMb,yBAAyB,CAACO,UAAU,EAAES,WAAW,EAAE,CAACR,KAAK,EAAE,GAAGO,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG;AAEA;;;;;;;;;;;;;AAaA,OAAO,eAAeM,MAAMA,CACxBX,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAyB,EACzBC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGV,qBAAqB;EAEjC,MAAM,CAACW,cAAc,EAAEC,OAAO,CAAC,GAAGb,UAAU,CAACQ,KAAK,EAAEC,YAAY,CAAC;EAEjE,MAAMK,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CAACZ,uBAAuB,CAACI,IAAI,EAAEK,cAAc,EAAEH,YAAY,EAAEE,SAAS,CAAC,CAAC;EAEjH,OAAO,MAAMb,yBAAyB,CAACO,UAAU,EAAES,WAAW,EAAE,CAACR,KAAK,EAAE,GAAGO,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}