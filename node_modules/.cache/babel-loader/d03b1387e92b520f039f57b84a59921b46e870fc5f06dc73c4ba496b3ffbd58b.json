{"ast":null,"code":"import { struct, u8, f64 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nexport var ScaledUiAmountInstruction;\n(function (ScaledUiAmountInstruction) {\n  ScaledUiAmountInstruction[ScaledUiAmountInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  ScaledUiAmountInstruction[ScaledUiAmountInstruction[\"UpdateMultiplier\"] = 1] = \"UpdateMultiplier\";\n})(ScaledUiAmountInstruction || (ScaledUiAmountInstruction = {}));\nexport const initializeScaledUiAmountConfigInstructionData = struct([u8('instruction'), u8('scaledUiAmountInstruction'), publicKey('authority'), f64('multiplier')]);\n/**\n * Construct an InitializeScaledUiAmountConfig instruction\n *\n * @param mint         Token mint account\n * @param authority    Optional authority that can update the multipliers\n * @param signers      The signer account(s)\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeScaledUiAmountConfigInstruction(mint, authority, multiplier, programId = TOKEN_2022_PROGRAM_ID) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(initializeScaledUiAmountConfigInstructionData.span);\n  initializeScaledUiAmountConfigInstructionData.encode({\n    instruction: TokenInstruction.ScaledUiAmountExtension,\n    scaledUiAmountInstruction: ScaledUiAmountInstruction.Initialize,\n    authority: authority ?? PublicKey.default,\n    multiplier: multiplier\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\nexport const updateMultiplierData = struct([u8('instruction'), u8('scaledUiAmountInstruction'), f64('multiplier'), u64('effectiveTimestamp')]);\n/**\n * Construct an UpdateMultiplierData instruction\n *\n * @param mint                  Token mint account\n * @param authority             Optional authority that can update the multipliers\n * @param multiplier            New multiplier\n * @param effectiveTimestamp    Effective time stamp for the new multiplier\n * @param multiSigners          Signing accounts if `owner` is a multisig\n * @param programId             SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateMultiplierDataInstruction(mint, authority, multiplier, effectiveTimestamp, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(updateMultiplierData.span);\n  updateMultiplierData.encode({\n    instruction: TokenInstruction.ScaledUiAmountExtension,\n    scaledUiAmountInstruction: ScaledUiAmountInstruction.UpdateMultiplier,\n    multiplier,\n    effectiveTimestamp\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":{"version":3,"names":["struct","u8","f64","publicKey","u64","TokenInstruction","TransactionInstruction","PublicKey","programSupportsExtensions","TOKEN_2022_PROGRAM_ID","TokenUnsupportedInstructionError","addSigners","ScaledUiAmountInstruction","initializeScaledUiAmountConfigInstructionData","createInitializeScaledUiAmountConfigInstruction","mint","authority","multiplier","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","ScaledUiAmountExtension","scaledUiAmountInstruction","Initialize","default","updateMultiplierData","createUpdateMultiplierDataInstruction","effectiveTimestamp","multiSigners","UpdateMultiplier"],"sources":["/home/sniperbot_1/solana-wallet-dashboard/solana-token-manager/node_modules/@solana/spl-token/src/extensions/scaledUiAmount/instructions.ts"],"sourcesContent":["import { struct, u8, f64 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport type { Signer } from '@solana/web3.js';\nimport { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\n\nexport enum ScaledUiAmountInstruction {\n    Initialize = 0,\n    UpdateMultiplier = 1,\n}\n\nexport interface InitializeScaledUiAmountConfigData {\n    instruction: TokenInstruction.ScaledUiAmountExtension;\n    scaledUiAmountInstruction: ScaledUiAmountInstruction.Initialize;\n    authority: PublicKey | null;\n    multiplier: number;\n}\n\nexport const initializeScaledUiAmountConfigInstructionData = struct<InitializeScaledUiAmountConfigData>([\n    u8('instruction'),\n    u8('scaledUiAmountInstruction'),\n    publicKey('authority'),\n    f64('multiplier'),\n]);\n\n/**\n * Construct an InitializeScaledUiAmountConfig instruction\n *\n * @param mint         Token mint account\n * @param authority    Optional authority that can update the multipliers\n * @param signers      The signer account(s)\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeScaledUiAmountConfigInstruction(\n    mint: PublicKey,\n    authority: PublicKey | null,\n    multiplier: number,\n    programId: PublicKey = TOKEN_2022_PROGRAM_ID,\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeScaledUiAmountConfigInstructionData.span);\n    initializeScaledUiAmountConfigInstructionData.encode(\n        {\n            instruction: TokenInstruction.ScaledUiAmountExtension,\n            scaledUiAmountInstruction: ScaledUiAmountInstruction.Initialize,\n            authority: authority ?? PublicKey.default,\n            multiplier: multiplier,\n        },\n        data,\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\nexport interface UpdateMultiplierData {\n    instruction: TokenInstruction.ScaledUiAmountExtension;\n    scaledUiAmountInstruction: ScaledUiAmountInstruction.UpdateMultiplier;\n    multiplier: number;\n    effectiveTimestamp: bigint;\n}\n\nexport const updateMultiplierData = struct<UpdateMultiplierData>([\n    u8('instruction'),\n    u8('scaledUiAmountInstruction'),\n    f64('multiplier'),\n    u64('effectiveTimestamp'),\n]);\n\n/**\n * Construct an UpdateMultiplierData instruction\n *\n * @param mint                  Token mint account\n * @param authority             Optional authority that can update the multipliers\n * @param multiplier            New multiplier\n * @param effectiveTimestamp    Effective time stamp for the new multiplier\n * @param multiSigners          Signing accounts if `owner` is a multisig\n * @param programId             SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateMultiplierDataInstruction(\n    mint: PublicKey,\n    authority: PublicKey,\n    multiplier: number,\n    effectiveTimestamp: bigint,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId: PublicKey = TOKEN_2022_PROGRAM_ID,\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], authority, multiSigners);\n\n    const data = Buffer.alloc(updateMultiplierData.span);\n    updateMultiplierData.encode(\n        {\n            instruction: TokenInstruction.ScaledUiAmountExtension,\n            scaledUiAmountInstruction: ScaledUiAmountInstruction.UpdateMultiplier,\n            multiplier,\n            effectiveTimestamp,\n        },\n        data,\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}