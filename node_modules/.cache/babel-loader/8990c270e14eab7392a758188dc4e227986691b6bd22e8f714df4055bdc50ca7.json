{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createUpdateMultiplierDataInstruction } from './instructions.js';\n/**\n * Update scaled UI amount multiplier\n *\n * @param connection            Connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  The token mint\n * @param owner                 Owner of the scaled UI amount mint\n * @param multiplier            New multiplier\n * @param effectiveTimestamp    Effective time stamp for the new multiplier\n * @param multiSigners          Signing accounts if `owner` is a multisig\n * @param confirmOptions        Options for confirming the transaction\n * @param programId             SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateMultiplier(connection, payer, mint, owner, multiplier, effectiveTimestamp, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createUpdateMultiplierDataInstruction(mint, ownerPublicKey, multiplier, effectiveTimestamp, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","getSigners","TOKEN_2022_PROGRAM_ID","createUpdateMultiplierDataInstruction","updateMultiplier","connection","payer","mint","owner","multiplier","effectiveTimestamp","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add"],"sources":["/home/sniperbot_1/solana-wallet-dashboard/solana-token-manager/node_modules/@solana/spl-token/src/extensions/scaledUiAmount/actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createUpdateMultiplierDataInstruction } from './instructions.js';\n\n/**\n * Update scaled UI amount multiplier\n *\n * @param connection            Connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  The token mint\n * @param owner                 Owner of the scaled UI amount mint\n * @param multiplier            New multiplier\n * @param effectiveTimestamp    Effective time stamp for the new multiplier\n * @param multiSigners          Signing accounts if `owner` is a multisig\n * @param confirmOptions        Options for confirming the transaction\n * @param programId             SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateMultiplier(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: Signer | PublicKey,\n    multiplier: number,\n    effectiveTimestamp: bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID,\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createUpdateMultiplierDataInstruction(\n            mint,\n            ownerPublicKey,\n            multiplier,\n            effectiveTimestamp,\n            multiSigners,\n            programId,\n        ),\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,qBAAqB,QAAQ,oBAAoB;AAC1D,SAASC,qCAAqC,QAAQ,mBAAmB;AAEzE;;;;;;;;;;;;;;;AAeA,OAAO,eAAeC,gBAAgBA,CAClCC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAyB,EACzBC,UAAkB,EAClBC,kBAA0B,EAC1BC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGX,qBAAqB;EAEjC,MAAM,CAACY,cAAc,EAAEC,OAAO,CAAC,GAAGd,UAAU,CAACO,KAAK,EAAEG,YAAY,CAAC;EAEjE,MAAMK,WAAW,GAAG,IAAIhB,WAAW,EAAE,CAACiB,GAAG,CACrCd,qCAAqC,CACjCI,IAAI,EACJO,cAAc,EACdL,UAAU,EACVC,kBAAkB,EAClBC,YAAY,EACZE,SAAS,CACZ,CACJ;EAED,OAAO,MAAMd,yBAAyB,CAACM,UAAU,EAAEW,WAAW,EAAE,CAACV,KAAK,EAAE,GAAGS,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}