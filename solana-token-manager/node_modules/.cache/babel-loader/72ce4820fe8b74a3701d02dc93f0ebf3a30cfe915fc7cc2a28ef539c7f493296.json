{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID, programSupportsExtensions } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { addSigners } from '../../instructions/internal.js';\nexport var PausableInstruction;\n(function (PausableInstruction) {\n  PausableInstruction[PausableInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  PausableInstruction[PausableInstruction[\"Pause\"] = 1] = \"Pause\";\n  PausableInstruction[PausableInstruction[\"Resume\"] = 2] = \"Resume\";\n})(PausableInstruction || (PausableInstruction = {}));\nexport const initializePausableConfigInstructionData = struct([u8('instruction'), u8('pausableInstruction'), publicKey('authority')]);\n/**\n * Construct a InitializePausableConfig instruction\n *\n * @param mint          Token mint account\n * @param authority     Optional authority that can pause or resume mint\n * @param programId     SPL Token program account\n */\nexport function createInitializePausableConfigInstruction(mint, authority, programId = TOKEN_2022_PROGRAM_ID) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(initializePausableConfigInstructionData.span);\n  initializePausableConfigInstructionData.encode({\n    instruction: TokenInstruction.PausableExtension,\n    pausableInstruction: PausableInstruction.Initialize,\n    authority: authority ?? PublicKey.default\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: data\n  });\n}\nexport const pauseInstructionData = struct([u8('instruction'), u8('pausableInstruction')]);\n/**\n * Construct a Pause instruction\n *\n * @param mint          Token mint account\n * @param authority     The pausable mint's authority\n * @param multiSigners  Signing accounts if authority is a multisig\n * @param programId     SPL Token program account\n */\nexport function createPauseInstruction(mint, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(pauseInstructionData.span);\n  pauseInstructionData.encode({\n    instruction: TokenInstruction.PausableExtension,\n    pausableInstruction: PausableInstruction.Pause\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: data\n  });\n}\nexport const resumeInstructionData = struct([u8('instruction'), u8('pausableInstruction')]);\n/**\n * Construct a Resume instruction\n *\n * @param mint          Token mint account\n * @param authority     The pausable mint's authority\n * @param multiSigners  Signing accounts if authority is a multisig\n * @param programId     SPL Token program account\n */\nexport function createResumeInstruction(mint, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(resumeInstructionData.span);\n  resumeInstructionData.encode({\n    instruction: TokenInstruction.PausableExtension,\n    pausableInstruction: PausableInstruction.Resume\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: data\n  });\n}","map":{"version":3,"names":["struct","u8","publicKey","PublicKey","TransactionInstruction","TOKEN_2022_PROGRAM_ID","programSupportsExtensions","TokenUnsupportedInstructionError","TokenInstruction","addSigners","PausableInstruction","initializePausableConfigInstructionData","createInitializePausableConfigInstruction","mint","authority","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","PausableExtension","pausableInstruction","Initialize","default","pauseInstructionData","createPauseInstruction","multiSigners","Pause","resumeInstructionData","createResumeInstruction","Resume"],"sources":["/home/sniperbot_1/solana-wallet-dashboard/solana-token-manager/node_modules/@solana/spl-token/src/extensions/pausable/instructions.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { Signer } from '@solana/web3.js';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID, programSupportsExtensions } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { addSigners } from '../../instructions/internal.js';\n\nexport enum PausableInstruction {\n    Initialize = 0,\n    Pause = 1,\n    Resume = 2,\n}\n\nexport interface InitializePausableConfigInstructionData {\n    instruction: TokenInstruction.PausableExtension;\n    pausableInstruction: PausableInstruction.Initialize;\n    authority: PublicKey;\n}\n\nexport const initializePausableConfigInstructionData = struct<InitializePausableConfigInstructionData>([\n    u8('instruction'),\n    u8('pausableInstruction'),\n    publicKey('authority'),\n]);\n\n/**\n * Construct a InitializePausableConfig instruction\n *\n * @param mint          Token mint account\n * @param authority     Optional authority that can pause or resume mint\n * @param programId     SPL Token program account\n */\nexport function createInitializePausableConfigInstruction(\n    mint: PublicKey,\n    authority: PublicKey | null,\n    programId: PublicKey = TOKEN_2022_PROGRAM_ID,\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializePausableConfigInstructionData.span);\n    initializePausableConfigInstructionData.encode(\n        {\n            instruction: TokenInstruction.PausableExtension,\n            pausableInstruction: PausableInstruction.Initialize,\n            authority: authority ?? PublicKey.default,\n        },\n        data,\n    );\n\n    return new TransactionInstruction({ keys, programId, data: data });\n}\n\nexport interface PauseInstructionData {\n    instruction: TokenInstruction.PausableExtension;\n    pausableInstruction: PausableInstruction.Pause;\n}\n\nexport const pauseInstructionData = struct<PauseInstructionData>([u8('instruction'), u8('pausableInstruction')]);\n\n/**\n * Construct a Pause instruction\n *\n * @param mint          Token mint account\n * @param authority     The pausable mint's authority\n * @param multiSigners  Signing accounts if authority is a multisig\n * @param programId     SPL Token program account\n */\nexport function createPauseInstruction(\n    mint: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId: PublicKey = TOKEN_2022_PROGRAM_ID,\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], authority, multiSigners);\n\n    const data = Buffer.alloc(pauseInstructionData.span);\n    pauseInstructionData.encode(\n        {\n            instruction: TokenInstruction.PausableExtension,\n            pausableInstruction: PausableInstruction.Pause,\n        },\n        data,\n    );\n\n    return new TransactionInstruction({ keys, programId, data: data });\n}\n\nexport interface ResumeInstructionData {\n    instruction: TokenInstruction.PausableExtension;\n    pausableInstruction: PausableInstruction.Resume;\n}\n\nexport const resumeInstructionData = struct<ResumeInstructionData>([u8('instruction'), u8('pausableInstruction')]);\n\n/**\n * Construct a Resume instruction\n *\n * @param mint          Token mint account\n * @param authority     The pausable mint's authority\n * @param multiSigners  Signing accounts if authority is a multisig\n * @param programId     SPL Token program account\n */\nexport function createResumeInstruction(\n    mint: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId: PublicKey = TOKEN_2022_PROGRAM_ID,\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], authority, multiSigners);\n\n    const data = Buffer.alloc(resumeInstructionData.span);\n    resumeInstructionData.encode(\n        {\n            instruction: TokenInstruction.PausableExtension,\n            pausableInstruction: PausableInstruction.Resume,\n        },\n        data,\n    );\n\n    return new TransactionInstruction({ keys, programId, data: data });\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAClD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,SAASC,SAAS,EAAEC,sBAAsB,QAAQ,iBAAiB;AACnE,SAASC,qBAAqB,EAAEC,yBAAyB,QAAQ,oBAAoB;AACrF,SAASC,gCAAgC,QAAQ,iBAAiB;AAClE,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,UAAU,QAAQ,gCAAgC;AAE3D,WAAYC,mBAIX;AAJD,WAAYA,mBAAmB;EAC3BA,mBAAA,CAAAA,mBAAA,kCAAc;EACdA,mBAAA,CAAAA,mBAAA,wBAAS;EACTA,mBAAA,CAAAA,mBAAA,0BAAU;AACd,CAAC,EAJWA,mBAAmB,KAAnBA,mBAAmB;AAY/B,OAAO,MAAMC,uCAAuC,GAAGX,MAAM,CAA0C,CACnGC,EAAE,CAAC,aAAa,CAAC,EACjBA,EAAE,CAAC,qBAAqB,CAAC,EACzBC,SAAS,CAAC,WAAW,CAAC,CACzB,CAAC;AAEF;;;;;;;AAOA,OAAM,SAAUU,yCAAyCA,CACrDC,IAAe,EACfC,SAA2B,EAC3BC,SAAA,GAAuBV,qBAAqB;EAE5C,IAAI,CAACC,yBAAyB,CAACS,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIR,gCAAgC,EAAE;EAChD;EACA,MAAMS,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEJ,IAAI;IAAEK,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAElE,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACX,uCAAuC,CAACY,IAAI,CAAC;EACvEZ,uCAAuC,CAACa,MAAM,CAC1C;IACIC,WAAW,EAAEjB,gBAAgB,CAACkB,iBAAiB;IAC/CC,mBAAmB,EAAEjB,mBAAmB,CAACkB,UAAU;IACnDd,SAAS,EAAEA,SAAS,IAAIX,SAAS,CAAC0B;GACrC,EACDT,IAAI,CACP;EAED,OAAO,IAAIhB,sBAAsB,CAAC;IAAEY,IAAI;IAAED,SAAS;IAAEK,IAAI,EAAEA;EAAI,CAAE,CAAC;AACtE;AAOA,OAAO,MAAMU,oBAAoB,GAAG9B,MAAM,CAAuB,CAACC,EAAE,CAAC,aAAa,CAAC,EAAEA,EAAE,CAAC,qBAAqB,CAAC,CAAC,CAAC;AAEhH;;;;;;;;AAQA,OAAM,SAAU8B,sBAAsBA,CAClClB,IAAe,EACfC,SAAoB,EACpBkB,YAAA,GAAuC,EAAE,EACzCjB,SAAA,GAAuBV,qBAAqB;EAE5C,IAAI,CAACC,yBAAyB,CAACS,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIR,gCAAgC,EAAE;EAChD;EACA,MAAMS,IAAI,GAAGP,UAAU,CAAC,CAAC;IAAEQ,MAAM,EAAEJ,IAAI;IAAEK,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC,EAAEL,SAAS,EAAEkB,YAAY,CAAC;EAEvG,MAAMZ,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACQ,oBAAoB,CAACP,IAAI,CAAC;EACpDO,oBAAoB,CAACN,MAAM,CACvB;IACIC,WAAW,EAAEjB,gBAAgB,CAACkB,iBAAiB;IAC/CC,mBAAmB,EAAEjB,mBAAmB,CAACuB;GAC5C,EACDb,IAAI,CACP;EAED,OAAO,IAAIhB,sBAAsB,CAAC;IAAEY,IAAI;IAAED,SAAS;IAAEK,IAAI,EAAEA;EAAI,CAAE,CAAC;AACtE;AAOA,OAAO,MAAMc,qBAAqB,GAAGlC,MAAM,CAAwB,CAACC,EAAE,CAAC,aAAa,CAAC,EAAEA,EAAE,CAAC,qBAAqB,CAAC,CAAC,CAAC;AAElH;;;;;;;;AAQA,OAAM,SAAUkC,uBAAuBA,CACnCtB,IAAe,EACfC,SAAoB,EACpBkB,YAAA,GAAuC,EAAE,EACzCjB,SAAA,GAAuBV,qBAAqB;EAE5C,IAAI,CAACC,yBAAyB,CAACS,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIR,gCAAgC,EAAE;EAChD;EACA,MAAMS,IAAI,GAAGP,UAAU,CAAC,CAAC;IAAEQ,MAAM,EAAEJ,IAAI;IAAEK,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC,EAAEL,SAAS,EAAEkB,YAAY,CAAC;EAEvG,MAAMZ,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACY,qBAAqB,CAACX,IAAI,CAAC;EACrDW,qBAAqB,CAACV,MAAM,CACxB;IACIC,WAAW,EAAEjB,gBAAgB,CAACkB,iBAAiB;IAC/CC,mBAAmB,EAAEjB,mBAAmB,CAAC0B;GAC5C,EACDhB,IAAI,CACP;EAED,OAAO,IAAIhB,sBAAsB,CAAC;IAAEY,IAAI;IAAED,SAAS;IAAEK,IAAI,EAAEA;EAAI,CAAE,CAAC;AACtE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}