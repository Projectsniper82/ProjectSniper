{"ast":null,"code":"import { PUBLIC_KEY_LENGTH, PublicKey } from '@solana/web3.js';\nimport { TokenTransferHookAccountDataNotFound, TokenTransferHookInvalidPubkeyData, TokenTransferHookPubkeyDataTooSmall, TokenTransferHookAccountNotFound } from '../../errors.js';\nexport async function unpackPubkeyData(keyDataConfig, previousMetas, instructionData, connection) {\n  const [discriminator, ...rest] = keyDataConfig;\n  const remaining = new Uint8Array(rest);\n  switch (discriminator) {\n    case 1:\n      return unpackPubkeyDataFromInstructionData(remaining, instructionData);\n    case 2:\n      return unpackPubkeyDataFromAccountData(remaining, previousMetas, connection);\n    default:\n      throw new TokenTransferHookInvalidPubkeyData();\n  }\n}\nfunction unpackPubkeyDataFromInstructionData(remaining, instructionData) {\n  if (remaining.length < 1) {\n    throw new TokenTransferHookInvalidPubkeyData();\n  }\n  const dataIndex = remaining[0];\n  if (instructionData.length < dataIndex + PUBLIC_KEY_LENGTH) {\n    throw new TokenTransferHookPubkeyDataTooSmall();\n  }\n  return new PublicKey(instructionData.subarray(dataIndex, dataIndex + PUBLIC_KEY_LENGTH));\n}\nasync function unpackPubkeyDataFromAccountData(remaining, previousMetas, connection) {\n  if (remaining.length < 2) {\n    throw new TokenTransferHookInvalidPubkeyData();\n  }\n  const [accountIndex, dataIndex] = remaining;\n  if (previousMetas.length <= accountIndex) {\n    throw new TokenTransferHookAccountDataNotFound();\n  }\n  const accountInfo = await connection.getAccountInfo(previousMetas[accountIndex].pubkey);\n  if (accountInfo == null) {\n    throw new TokenTransferHookAccountNotFound();\n  }\n  if (accountInfo.data.length < dataIndex + PUBLIC_KEY_LENGTH) {\n    throw new TokenTransferHookPubkeyDataTooSmall();\n  }\n  return new PublicKey(accountInfo.data.subarray(dataIndex, dataIndex + PUBLIC_KEY_LENGTH));\n}","map":{"version":3,"names":["PUBLIC_KEY_LENGTH","PublicKey","TokenTransferHookAccountDataNotFound","TokenTransferHookInvalidPubkeyData","TokenTransferHookPubkeyDataTooSmall","TokenTransferHookAccountNotFound","unpackPubkeyData","keyDataConfig","previousMetas","instructionData","connection","discriminator","rest","remaining","Uint8Array","unpackPubkeyDataFromInstructionData","unpackPubkeyDataFromAccountData","length","dataIndex","subarray","accountIndex","accountInfo","getAccountInfo","pubkey","data"],"sources":["/home/sniperbot_1/solana-wallet-dashboard/solana-token-manager/node_modules/@solana/spl-token/src/extensions/transferHook/pubkeyData.ts"],"sourcesContent":["import { PUBLIC_KEY_LENGTH, PublicKey } from '@solana/web3.js';\nimport type { AccountMeta, Connection } from '@solana/web3.js';\nimport {\n    TokenTransferHookAccountDataNotFound,\n    TokenTransferHookInvalidPubkeyData,\n    TokenTransferHookPubkeyDataTooSmall,\n    TokenTransferHookAccountNotFound,\n} from '../../errors.js';\n\nexport async function unpackPubkeyData(\n    keyDataConfig: Uint8Array,\n    previousMetas: AccountMeta[],\n    instructionData: Buffer,\n    connection: Connection,\n): Promise<PublicKey> {\n    const [discriminator, ...rest] = keyDataConfig;\n    const remaining = new Uint8Array(rest);\n    switch (discriminator) {\n        case 1:\n            return unpackPubkeyDataFromInstructionData(remaining, instructionData);\n        case 2:\n            return unpackPubkeyDataFromAccountData(remaining, previousMetas, connection);\n        default:\n            throw new TokenTransferHookInvalidPubkeyData();\n    }\n}\n\nfunction unpackPubkeyDataFromInstructionData(remaining: Uint8Array, instructionData: Buffer): PublicKey {\n    if (remaining.length < 1) {\n        throw new TokenTransferHookInvalidPubkeyData();\n    }\n    const dataIndex = remaining[0];\n    if (instructionData.length < dataIndex + PUBLIC_KEY_LENGTH) {\n        throw new TokenTransferHookPubkeyDataTooSmall();\n    }\n    return new PublicKey(instructionData.subarray(dataIndex, dataIndex + PUBLIC_KEY_LENGTH));\n}\n\nasync function unpackPubkeyDataFromAccountData(\n    remaining: Uint8Array,\n    previousMetas: AccountMeta[],\n    connection: Connection,\n): Promise<PublicKey> {\n    if (remaining.length < 2) {\n        throw new TokenTransferHookInvalidPubkeyData();\n    }\n    const [accountIndex, dataIndex] = remaining;\n    if (previousMetas.length <= accountIndex) {\n        throw new TokenTransferHookAccountDataNotFound();\n    }\n    const accountInfo = await connection.getAccountInfo(previousMetas[accountIndex].pubkey);\n    if (accountInfo == null) {\n        throw new TokenTransferHookAccountNotFound();\n    }\n    if (accountInfo.data.length < dataIndex + PUBLIC_KEY_LENGTH) {\n        throw new TokenTransferHookPubkeyDataTooSmall();\n    }\n    return new PublicKey(accountInfo.data.subarray(dataIndex, dataIndex + PUBLIC_KEY_LENGTH));\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,SAAS,QAAQ,iBAAiB;AAE9D,SACIC,oCAAoC,EACpCC,kCAAkC,EAClCC,mCAAmC,EACnCC,gCAAgC,QAC7B,iBAAiB;AAExB,OAAO,eAAeC,gBAAgBA,CAClCC,aAAyB,EACzBC,aAA4B,EAC5BC,eAAuB,EACvBC,UAAsB;EAEtB,MAAM,CAACC,aAAa,EAAE,GAAGC,IAAI,CAAC,GAAGL,aAAa;EAC9C,MAAMM,SAAS,GAAG,IAAIC,UAAU,CAACF,IAAI,CAAC;EACtC,QAAQD,aAAa;IACjB,KAAK,CAAC;MACF,OAAOI,mCAAmC,CAACF,SAAS,EAAEJ,eAAe,CAAC;IAC1E,KAAK,CAAC;MACF,OAAOO,+BAA+B,CAACH,SAAS,EAAEL,aAAa,EAAEE,UAAU,CAAC;IAChF;MACI,MAAM,IAAIP,kCAAkC,EAAE;EACtD;AACJ;AAEA,SAASY,mCAAmCA,CAACF,SAAqB,EAAEJ,eAAuB;EACvF,IAAII,SAAS,CAACI,MAAM,GAAG,CAAC,EAAE;IACtB,MAAM,IAAId,kCAAkC,EAAE;EAClD;EACA,MAAMe,SAAS,GAAGL,SAAS,CAAC,CAAC,CAAC;EAC9B,IAAIJ,eAAe,CAACQ,MAAM,GAAGC,SAAS,GAAGlB,iBAAiB,EAAE;IACxD,MAAM,IAAII,mCAAmC,EAAE;EACnD;EACA,OAAO,IAAIH,SAAS,CAACQ,eAAe,CAACU,QAAQ,CAACD,SAAS,EAAEA,SAAS,GAAGlB,iBAAiB,CAAC,CAAC;AAC5F;AAEA,eAAegB,+BAA+BA,CAC1CH,SAAqB,EACrBL,aAA4B,EAC5BE,UAAsB;EAEtB,IAAIG,SAAS,CAACI,MAAM,GAAG,CAAC,EAAE;IACtB,MAAM,IAAId,kCAAkC,EAAE;EAClD;EACA,MAAM,CAACiB,YAAY,EAAEF,SAAS,CAAC,GAAGL,SAAS;EAC3C,IAAIL,aAAa,CAACS,MAAM,IAAIG,YAAY,EAAE;IACtC,MAAM,IAAIlB,oCAAoC,EAAE;EACpD;EACA,MAAMmB,WAAW,GAAG,MAAMX,UAAU,CAACY,cAAc,CAACd,aAAa,CAACY,YAAY,CAAC,CAACG,MAAM,CAAC;EACvF,IAAIF,WAAW,IAAI,IAAI,EAAE;IACrB,MAAM,IAAIhB,gCAAgC,EAAE;EAChD;EACA,IAAIgB,WAAW,CAACG,IAAI,CAACP,MAAM,GAAGC,SAAS,GAAGlB,iBAAiB,EAAE;IACzD,MAAM,IAAII,mCAAmC,EAAE;EACnD;EACA,OAAO,IAAIH,SAAS,CAACoB,WAAW,CAACG,IAAI,CAACL,QAAQ,CAACD,SAAS,EAAEA,SAAS,GAAGlB,iBAAiB,CAAC,CAAC;AAC7F","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}