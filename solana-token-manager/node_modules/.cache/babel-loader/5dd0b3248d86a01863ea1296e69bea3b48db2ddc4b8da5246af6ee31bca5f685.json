{"ast":null,"code":"var _jsxFileName = \"/home/sniperbot_1/solana-wallet-dashboard/solana-token-manager/src/components/TradingInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PublicKey, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TradingInterface = ({\n  tokenAddress,\n  connection,\n  wallet\n}) => {\n  _s();\n  const [tradeType, setTradeType] = useState('buy'); // 'buy' or 'sell'\n  const [amount, setAmount] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [status, setStatus] = useState({\n    message: '',\n    isError: false\n  });\n  const [priceImpact, setPriceImpact] = useState('0.00');\n  const [expectedOutput, setExpectedOutput] = useState('0');\n  const [tokenBalance, setTokenBalance] = useState(0);\n  const [solBalance, setSolBalance] = useState(0);\n  useEffect(() => {\n    if (!connection || !wallet || !tokenAddress) return;\n    const fetchBalances = async () => {\n      try {\n        // Get SOL balance\n        const lamports = await connection.getBalance(wallet.publicKey);\n        setSolBalance(lamports / LAMPORTS_PER_SOL);\n\n        // Try to get token balance\n        try {\n          const mintPubkey = new PublicKey(tokenAddress);\n          const tokenAccounts = await connection.getParsedTokenAccountsByOwner(wallet.publicKey, {\n            mint: mintPubkey\n          });\n          if (tokenAccounts.value.length > 0) {\n            const accountInfo = tokenAccounts.value[0].account.data.parsed.info;\n            const amount = accountInfo.tokenAmount.amount;\n            const decimals = accountInfo.tokenAmount.decimals;\n            setTokenBalance(Number(amount) / Math.pow(10, decimals));\n          } else {\n            setTokenBalance(0);\n          }\n        } catch (err) {\n          console.log('No token account found:', err);\n          setTokenBalance(0);\n        }\n      } catch (err) {\n        console.error('Error fetching balances:', err);\n      }\n    };\n    fetchBalances();\n  }, [connection, wallet, tokenAddress]);\n\n  // Calculate price impact and expected output when amount changes\n  useEffect(() => {\n    if (!amount || Number(amount) <= 0) {\n      setPriceImpact('0.00');\n      setExpectedOutput('0');\n      return;\n    }\n\n    // This is a simplified price impact calculation\n    // In reality, this would be based on liquidity pool depths\n    const impact = Math.min(Number(amount) * 2 / 100, 15); // Max 15% impact\n    setPriceImpact(impact.toFixed(2));\n\n    // Calculate expected output (simplified - would normally come from DEX quote)\n    const mockTokenPrice = 0.0001; // SOL per token\n\n    if (tradeType === 'buy') {\n      const tokensOut = Number(amount) / mockTokenPrice;\n      setExpectedOutput(tokensOut.toLocaleString(undefined, {\n        maximumFractionDigits: 2\n      }));\n    } else {\n      const solOut = Number(amount) * mockTokenPrice;\n      setExpectedOutput(solOut.toFixed(4));\n    }\n  }, [amount, tradeType]);\n  const executeTrade = async () => {\n    if (!tokenAddress || !connection || !wallet || !amount || Number(amount) <= 0) {\n      setStatus({\n        message: 'Please enter a valid amount',\n        isError: true\n      });\n      return;\n    }\n    setLoading(true);\n    setStatus({\n      message: '',\n      isError: false\n    });\n    try {\n      if (tradeType === 'buy') {\n        // Check if user has enough SOL\n        if (Number(amount) > solBalance) {\n          throw new Error('Insufficient SOL balance');\n        }\n\n        // This is a simplified example. In a real implementation,\n        // you would use Jupiter SDK to execute the swap\n        setStatus({\n          message: 'This would execute a real buy transaction. Feature coming soon!',\n          isError: false\n        });\n      } else {\n        // Check if user has enough tokens\n        if (Number(amount) > tokenBalance) {\n          throw new Error('Insufficient token balance');\n        }\n\n        // This is a simplified example. In a real implementation,\n        // you would use Jupiter SDK to execute the swap\n        setStatus({\n          message: 'This would execute a real sell transaction. Feature coming soon!',\n          isError: false\n        });\n      }\n\n      // Simulated delay to show loading state\n      await new Promise(resolve => setTimeout(resolve, 1500));\n    } catch (err) {\n      console.error(`Error ${tradeType}ing tokens:`, err);\n      setStatus({\n        message: `Error ${tradeType}ing tokens: ${err.message}`,\n        isError: true\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white shadow-md rounded-lg p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-lg font-medium mb-4\",\n      children: \"Trading Interface\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2 mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `flex-1 py-2 rounded-lg ${tradeType === 'buy' ? 'bg-green-500 text-white' : 'bg-gray-200'}`,\n          onClick: () => setTradeType('buy'),\n          children: \"Buy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `flex-1 py-2 rounded-lg ${tradeType === 'sell' ? 'bg-red-500 text-white' : 'bg-gray-200'}`,\n          onClick: () => setTradeType('sell'),\n          children: \"Sell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium text-gray-700 mb-1\",\n          children: tradeType === 'buy' ? 'SOL Amount to Spend' : 'Token Amount to Sell'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"flex-1 p-2 border rounded-l\",\n            placeholder: tradeType === 'buy' ? 'SOL Amount' : 'Token Amount',\n            value: amount,\n            onChange: e => setAmount(e.target.value),\n            min: \"0\",\n            step: tradeType === 'buy' ? '0.01' : '1'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-gray-200 px-3 rounded-r\",\n            onClick: () => {\n              if (tradeType === 'buy') {\n                setAmount(Math.max(0, solBalance - 0.01).toFixed(2)); // Leave 0.01 SOL for fees\n              } else {\n                setAmount(tokenBalance.toString());\n              }\n            },\n            children: \"MAX\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between text-xs text-gray-500 mt-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Balance: \", tradeType === 'buy' ? `${solBalance.toFixed(4)} SOL` : `${tokenBalance.toLocaleString()} Tokens`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Price Impact: ~\", priceImpact, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-50 p-3 rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-500\",\n            children: \"Expected Output:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-medium\",\n            children: [expectedOutput, \" \", tradeType === 'buy' ? 'Tokens' : 'SOL']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `w-full py-3 rounded-lg text-white font-medium ${tradeType === 'buy' ? 'bg-green-600 hover:bg-green-700' : 'bg-red-600 hover:bg-red-700'} disabled:opacity-50`,\n        onClick: executeTrade,\n        disabled: loading || !amount || Number(amount) <= 0 || !tokenAddress || !wallet,\n        children: loading ? 'Processing...' : tradeType === 'buy' ? 'Buy Tokens' : 'Sell Tokens'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), status.message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `mt-2 p-3 rounded text-sm ${status.isError ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`,\n        children: status.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(TradingInterface, \"+8vlMMrd2M6ydOT/HbQKdmpDK+4=\");\n_c = TradingInterface;\nexport default TradingInterface;\nvar _c;\n$RefreshReg$(_c, \"TradingInterface\");","map":{"version":3,"names":["React","useState","useEffect","PublicKey","LAMPORTS_PER_SOL","jsxDEV","_jsxDEV","TradingInterface","tokenAddress","connection","wallet","_s","tradeType","setTradeType","amount","setAmount","loading","setLoading","status","setStatus","message","isError","priceImpact","setPriceImpact","expectedOutput","setExpectedOutput","tokenBalance","setTokenBalance","solBalance","setSolBalance","fetchBalances","lamports","getBalance","publicKey","mintPubkey","tokenAccounts","getParsedTokenAccountsByOwner","mint","value","length","accountInfo","account","data","parsed","info","tokenAmount","decimals","Number","Math","pow","err","console","log","error","impact","min","toFixed","mockTokenPrice","tokensOut","toLocaleString","undefined","maximumFractionDigits","solOut","executeTrade","Error","Promise","resolve","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","onChange","e","target","step","max","toString","disabled","_c","$RefreshReg$"],"sources":["/home/sniperbot_1/solana-wallet-dashboard/solana-token-manager/src/components/TradingInterface.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PublicKey, LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nconst TradingInterface = ({ tokenAddress, connection, wallet }) => {\n  const [tradeType, setTradeType] = useState('buy'); // 'buy' or 'sell'\n  const [amount, setAmount] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [status, setStatus] = useState({ message: '', isError: false });\n  const [priceImpact, setPriceImpact] = useState('0.00');\n  const [expectedOutput, setExpectedOutput] = useState('0');\n  const [tokenBalance, setTokenBalance] = useState(0);\n  const [solBalance, setSolBalance] = useState(0);\n  \n  useEffect(() => {\n    if (!connection || !wallet || !tokenAddress) return;\n    \n    const fetchBalances = async () => {\n      try {\n        // Get SOL balance\n        const lamports = await connection.getBalance(wallet.publicKey);\n        setSolBalance(lamports / LAMPORTS_PER_SOL);\n        \n        // Try to get token balance\n        try {\n          const mintPubkey = new PublicKey(tokenAddress);\n          const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n            wallet.publicKey,\n            { mint: mintPubkey }\n          );\n          \n          if (tokenAccounts.value.length > 0) {\n            const accountInfo = tokenAccounts.value[0].account.data.parsed.info;\n            const amount = accountInfo.tokenAmount.amount;\n            const decimals = accountInfo.tokenAmount.decimals;\n            setTokenBalance(Number(amount) / Math.pow(10, decimals));\n          } else {\n            setTokenBalance(0);\n          }\n        } catch (err) {\n          console.log('No token account found:', err);\n          setTokenBalance(0);\n        }\n      } catch (err) {\n        console.error('Error fetching balances:', err);\n      }\n    };\n    \n    fetchBalances();\n  }, [connection, wallet, tokenAddress]);\n  \n  // Calculate price impact and expected output when amount changes\n  useEffect(() => {\n    if (!amount || Number(amount) <= 0) {\n      setPriceImpact('0.00');\n      setExpectedOutput('0');\n      return;\n    }\n    \n    // This is a simplified price impact calculation\n    // In reality, this would be based on liquidity pool depths\n    const impact = Math.min((Number(amount) * 2) / 100, 15); // Max 15% impact\n    setPriceImpact(impact.toFixed(2));\n    \n    // Calculate expected output (simplified - would normally come from DEX quote)\n    const mockTokenPrice = 0.0001; // SOL per token\n    \n    if (tradeType === 'buy') {\n      const tokensOut = Number(amount) / mockTokenPrice;\n      setExpectedOutput(tokensOut.toLocaleString(undefined, { maximumFractionDigits: 2 }));\n    } else {\n      const solOut = Number(amount) * mockTokenPrice;\n      setExpectedOutput(solOut.toFixed(4));\n    }\n  }, [amount, tradeType]);\n  \n  const executeTrade = async () => {\n    if (!tokenAddress || !connection || !wallet || !amount || Number(amount) <= 0) {\n      setStatus({ message: 'Please enter a valid amount', isError: true });\n      return;\n    }\n    \n    setLoading(true);\n    setStatus({ message: '', isError: false });\n    \n    try {\n      if (tradeType === 'buy') {\n        // Check if user has enough SOL\n        if (Number(amount) > solBalance) {\n          throw new Error('Insufficient SOL balance');\n        }\n        \n        // This is a simplified example. In a real implementation,\n        // you would use Jupiter SDK to execute the swap\n        setStatus({ \n          message: 'This would execute a real buy transaction. Feature coming soon!', \n          isError: false \n        });\n      } else {\n        // Check if user has enough tokens\n        if (Number(amount) > tokenBalance) {\n          throw new Error('Insufficient token balance');\n        }\n        \n        // This is a simplified example. In a real implementation,\n        // you would use Jupiter SDK to execute the swap\n        setStatus({ \n          message: 'This would execute a real sell transaction. Feature coming soon!', \n          isError: false \n        });\n      }\n      \n      // Simulated delay to show loading state\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n    } catch (err) {\n      console.error(`Error ${tradeType}ing tokens:`, err);\n      setStatus({ \n        message: `Error ${tradeType}ing tokens: ${err.message}`, \n        isError: true \n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"bg-white shadow-md rounded-lg p-4\">\n      <h2 className=\"text-lg font-medium mb-4\">Trading Interface</h2>\n      \n      <div className=\"space-y-4\">\n        <div className=\"flex space-x-2 mb-4\">\n          <button\n            className={`flex-1 py-2 rounded-lg ${tradeType === 'buy' ? 'bg-green-500 text-white' : 'bg-gray-200'}`}\n            onClick={() => setTradeType('buy')}\n          >\n            Buy\n          </button>\n          <button\n            className={`flex-1 py-2 rounded-lg ${tradeType === 'sell' ? 'bg-red-500 text-white' : 'bg-gray-200'}`}\n            onClick={() => setTradeType('sell')}\n          >\n            Sell\n          </button>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            {tradeType === 'buy' ? 'SOL Amount to Spend' : 'Token Amount to Sell'}\n          </label>\n          <div className=\"flex\">\n            <input\n              type=\"number\"\n              className=\"flex-1 p-2 border rounded-l\"\n              placeholder={tradeType === 'buy' ? 'SOL Amount' : 'Token Amount'}\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n              min=\"0\"\n              step={tradeType === 'buy' ? '0.01' : '1'}\n            />\n            <button\n              className=\"bg-gray-200 px-3 rounded-r\"\n              onClick={() => {\n                if (tradeType === 'buy') {\n                  setAmount(Math.max(0, solBalance - 0.01).toFixed(2)); // Leave 0.01 SOL for fees\n                } else {\n                  setAmount(tokenBalance.toString());\n                }\n              }}\n            >\n              MAX\n            </button>\n          </div>\n          <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n            <span>Balance: {tradeType === 'buy' ? `${solBalance.toFixed(4)} SOL` : `${tokenBalance.toLocaleString()} Tokens`}</span>\n            <span>Price Impact: ~{priceImpact}%</span>\n          </div>\n        </div>\n        \n        <div className=\"bg-gray-50 p-3 rounded\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-sm text-gray-500\">Expected Output:</span>\n            <span className=\"font-medium\">\n              {expectedOutput} {tradeType === 'buy' ? 'Tokens' : 'SOL'}\n            </span>\n          </div>\n        </div>\n        \n        <button\n          className={`w-full py-3 rounded-lg text-white font-medium ${\n            tradeType === 'buy' ? 'bg-green-600 hover:bg-green-700' : 'bg-red-600 hover:bg-red-700'\n          } disabled:opacity-50`}\n          onClick={executeTrade}\n          disabled={loading || !amount || Number(amount) <= 0 || !tokenAddress || !wallet}\n        >\n          {loading ? 'Processing...' : tradeType === 'buy' ? 'Buy Tokens' : 'Sell Tokens'}\n        </button>\n        \n        {status.message && (\n          <div className={`mt-2 p-3 rounded text-sm ${status.isError ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`}>\n            {status.message}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TradingInterface;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}